// Author: cvet
// Modified by: Kilgore
#include "_macros.fos"
#include "_vars.fos"
#include "_animation.fos"
#include "itempid.h"

#define TIME_TO_DEATH    ( REAL_MINUTE( Random(110, 130 ) ) ) // Время самоубийства турели

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";
import bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName ) from "npc_planes";

uint[] TurretIds;

void _TurretInit( Critter& turret, bool firstTime )
{
    turret.StatBase[ ST_REPLICATION_TIME ] = 1;
    turret.StatBase[ ST_PERCEPTION ] = 10;
    turret.StatBase[ ST_ACTION_POINTS ] = 100;
    turret.StatBase[ ST_MAX_LIFE ] = 9999;
    turret.StatBase[ ST_BONUS_LOOK ] = 300;
    turret.StatBase[ ST_STRENGTH ] = 10;
    turret.StatBase[ ST_ENDURANCE ] = 10;
    turret.SkillBase[ SK_BIG_GUNS ] = 300;
    turret.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    turret.ModeBase[ MODE_UNLIMITED_AMMO ] = 1;
    turret.PerkBase[ PE_TERMINATOR ] = 1;
	turret.PerkBase[PE_BONUS_RANGED_DAMAGE]=5;

    turret.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL, "_TurretSmthUseSkill" );
    turret.SetEvent( CRITTER_EVENT_SMTH_ATTACK, "_TurretSmthAttack" );

    if( turret.GetTimeEvents( CTE_AUTOKILL, null, null, null ) == 0 )
        turret.AddTimeEvent( "cte_KillTurret", TIME_TO_DEATH, CTE_AUTOKILL );

    if( turret.CountItem( PID_HEAVY_DUAL_MINIGUN ) == 0 )
        turret.AddItem( PID_HEAVY_DUAL_MINIGUN, 1 );

    TurretIds.insertLast( turret.Id );
}

uint cte_KillTurret( Critter& cr, int identifier, uint& rate )
{
    if( !cr.IsDead() )
        cr.ToDead( ANIM2_DEAD_FRONT, null );
    return TIME_TO_DEATH;
}

void t_Electro( Critter& cr, Scenery& trigger, bool entered, uint8 dir )
{
    if( not entered || not cr.IsPlayer() )
        return;

    Map@ map = cr.GetMap();
    if( not valid( map ) )
        return;

    bool attack = false;

    // В отстойник. Убиваем.
    if( dir == 4 || dir == 5 || dir == 0 ) attack = true;

    if( attack )
    {
        for( uint i = 0, j = TurretIds.length(); i < j; i++ )
        {

            Critter@ turret = GetCritter( TurretIds[ i ] );
            if( valid( turret ) && not turret.IsDead() )
                AddAttackPlane( turret, 0, cr );
        }
    }
}

void _TurretSmthUseSkill( Critter& turret, Critter& hacker, int skill, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( skill == SK_SCIENCE && valid( onCritter ) && onCritter.Id == turret.Id )
    {
        int      sk = hacker.Skill[ SK_SCIENCE ]/2;
        sk = CLAMP( sk, 6, 95 );
        if( sk >= Random( 1, 100 ) )
        {
            turret.DropPlanes();
            AddMiscPlane( turret, 100, __FullSecond + REAL_SECOND( 10 ), null );    // Wait 10 seconds
            turret.Say( SAY_NORM_ON_HEAD, "!@#$%^&*" );
        }
        else
        {
            AddAttackPlane( turret, 0, hacker );
        }
    }
}

void _TurretSmthAttack( Critter& turret, Critter& attacker, Critter& target )
{
    if( attacker.IsPlayer() )
        AddAttackPlane( turret, 0, attacker );
}
