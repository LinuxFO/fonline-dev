//
// FOnline: 2238
// Rotators
//
// quest_la_gunr_caravan.fos
//

#include "_colors.fos"
#include "_maps.fos"
#include "_vars.fos"
#include "_macros.fos"
#include "entire.fos"
#include "mapdata_h.fos"
#include "messages_h.fos"
#include "guard_h.fos"
#include "npc_common_h.fos"
#include "npc_planes_h.fos"
#include "utils_h.fos"
#include "logging_h.fos"

#define DIALOG_ID                     (10277)

// npc roles (defines distance mob will attack from))
#define ROLE_DEFAULT                  (0)
#define ROLE_AGRESSIVE                (1)
#define ROLE_PASSIVE                  (2)

// useful variables
#define ALERTED                       # (cr)           (cr.StatBase[ST_VAR1]) // idle time is shorter if in that mode // note that it uses StatBase for read and write

// idle time in milseconds (normal is slower for performance issues)
#define IDLE_NORMAL                   (5000)
#define IDLE_ALERTED                  (1000)

import void NpcSetLevel(Critter& npc, int level) from "parameters";
import void SetWear(Item& item, int wearProcent) from "repair";
import void SetMinWear(Item& item, int wearProcent) from "repair";

#define STR_MUTANT_ENTRANCE_ATTACK    (1)

uint16[] npcProtos = { 552, 553};
uint16[] npcBags = { 201, 309, 307, 165, 313, 183 };
uint16[] npcBagsExtra = { 279 };

void r_SpawnLocation(Critter& player, Critter@ npc)
{
    Critter@[] crits = { player };
    int loc = CreateLocation(LOCATION_MutantsHideout, Random(1700, 1850), Random(2300, 2500), crits);
    if(loc == 0)
        return;
    GameVar@  locidv = GetLocalVar(LVAR_q_la_gunrunners_caravan_locid, player.Id);
    locidv = loc;
    Location@ location = GetLocation(loc);
    location.Color = COLOR_WM_QUEST;
    location.Update();
    Map@      map = location.GetMapByIndex(0);
    if(player.Mode[MODE_DEFAULT_COMBAT] == COMBAT_MODE_TURN_BASED)
        SetTurnBasedAvailability(location);
    map.SetData(MAP_DATA_GUNRUNNER_CARAVAN_OWNER, player.Id);
    map.SetEvent(MAP_EVENT_IN_CRITTER, "_CritterInMap");

    SetQuestGarbager(0, player.Id, loc, LVAR_q_la_gunrunners_caravan, 6);
    // player.SetKnownLoc(true, loc);

    Map@ cave = location.GetMapByIndex(1);
    if(valid(cave))
    {
        array<Entire> entires;
        ParseEntires(cave, entires, 80);
        uint8 maxNpc = Random(15, 20);

        for(uint8 i = 0; i < maxNpc; ++i)
        {
            uint entId = Random(0, entires.length()-1);
            Entire@       ent = entires[entId];
            entires.removeAt(entId);

            uint16 npcPid = random_from_array(npcProtos);
            uint16 npcBag = random_from_array(npcBags);

            if(Random(0, 100) < 3)
                npcBag = random_from_array(npcBagsExtra);

            int[] params =
            {
                ST_REPLICATION_TIME, REPLICATION_NEVER,
                ST_NPC_ROLE, 1,
                ST_TEAM_ID, 5001,
                ST_DIALOG_ID, 10277,
                ST_AI_ID, 194,
                ST_BAG_ID, npcBag
            };
     
            Critter@ npc = cave.AddNpc(npcPid , ent.HexX, ent.HexY, Random(0, 5), params, null, "_Mutant");
        }
    }

    array<uint> data = { loc };
    CreateTimeEvent( __FullSecond + REAL_SECOND(20), "e_WearWeapons", data, true ); 
    DynamicLocationAddLog(player, npc, locidv, "quest_la_gunr_caravan");
}

void _CritterInMap(Map& map, Critter& cr)
{
    if(cr.IsPlayer())
    {
        Location@ loc = map.GetLocation();
        if(valid(loc) && !cr.IsKnownLoc(true,loc.Id)) 
        {
            cr.SetKnownLoc(true, loc.Id);
            cr.Say(SAY_NETMSG, "You note coordinates of this location in your PipBoy.");
        }
    }
}

uint e_WearWeapons(uint[] @ values)
{
    Location@ location = GetLocation(values[0]);

    if(valid(location))
    {
        array<Map@> maps;
        uint count = location.GetMaps(maps);
        for(uint m = 0; m < count; m++)
        {
            if (!valid(maps[m]))
                continue;

            array<Critter@> critters;
            uint n = maps[m].GetCritters(0, FIND_ALL | FIND_ONLY_NPC, critters);
            for(uint c = 0; c < n; ++c)
            {
                if (!valid(critters[c]))
                    continue;

                array<Item@> weapon;
                uint w = critters[c].GetItemsByType(ITEM_TYPE_WEAPON, weapon);
                for (uint i = 0; i < w; ++i)
                {
                    if(valid(weapon[i]) && weapon[i].IsDeteriorable() && !weapon[i].IsStackable())
                    {
                        uint wear = Random(10, 50);
                        SetMinWear(weapon[i], wear);
                        SetWear(weapon[i], wear+Random(10, 30));
                    }
                }
            }
        }
    }

    return 0;
}

void r_DeleteLocation(Critter& player, Critter@ npc)
{
    GameVar@ var = GetLocalVar(LVAR_q_la_gunrunners_caravan_locid, player.Id);
    DeleteLocation(var.GetValue());
    DynamicLocationDelLog(player, npc, var, "quest_la_gunr_caravan");
}

Critter@ GetOwner(Map& map)
{
    return GetCritter(map.GetData(MAP_DATA_GUNRUNNER_CARAVAN_OWNER));
}

// =============================================
// Map trigger
// =============================================

void t_EntranceAttack(Critter& cr, Scenery& trigger, bool entered, uint8 dir)
{
    if(!cr.IsPlayer() || !entered)
        return;

    cr.SendMessage(MSG_ENTRANCE_MUTANT_ATTACK, 0, MESSAGE_TO_VISIBLE_ME);
}

// =============================================
// Super Mutants / Critter
// =============================================

void _Mutant(Critter& cr, bool firstTime)
{
    cr.StatBase[ST_REPLICATION_TIME] = REPLICATION_NEVER;
    // cr.ModeBase[MODE_NO_HOME] = 1;
    // cr.ModeBase[MODE_NO_LOOT] = 1;
    // cr.ModeBase[MODE_NO_DROP] = 1;
    cr.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle");
    // cr.SetEvent(CRITTER_EVENT_ATTACKED, "_Attacked");
    cr.SetEvent(CRITTER_EVENT_MESSAGE, "_OnMessage");
    cr.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritter");
    cr.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter");
    _CritSetExtMode(cr, MODE_EXT_MOB);

    // GuardInit(cr);

    if(firstTime)
    {
        NpcSetLevel(cr, 15);
        GuardPerks(cr);
    }
}

bool _Attacked(Critter& cr, Critter& attacker)
{
    cr.SendMessage(MSG_IM_ATTACKED, attacker.Id, MESSAGE_TO_ALL_ON_MAP);
    return false;
}
void _OnMessage(Critter& cr, Critter& fromCr, int message, int value)
{
    if(message == MSG_IM_ATTACKED)
        AttackCritter(cr, fromCr);

    if(message == MSG_ENTRANCE_MUTANT_ATTACK)
    {
        AttackCritter(cr, fromCr);
        cr.SayMsg(SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR(DIALOG_ID, STR_MUTANT_ENTRANCE_ATTACK));
    }
}

// =============================================
// Mob script parts
// =============================================

//
// Checks if critter is within attack distance
//
void _MobIdle(Critter& cr)
{
    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = cr.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(cr);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(cr, crits[i]) > dist)
            continue;
        else
        {
            // attack
            cr.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(ALERTED(cr) > 0)
    {
        // MoveMob(mob, false);
        cr.Wait(IDLE_ALERTED);
    }
    else
    {
        // MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        cr.Wait(IDLE_NORMAL);
    }
}

void MoveMob(Critter& cr, bool run)
{
    int dist = Random(0, (cr.Stat[ST_NPC_ROLE] % 100 / 10));
    if(dist == 0)
    {
        cr.MoveRandom();
    }
    else
    {
        // bool AddWalkPlane(Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
        uint16 hexX = cr.HexX;
        uint16 hexY = cr.HexY;
        cr.GetMap().MoveHexByDir(hexX, hexY, Random(0, 5), dist);
        AddWalkPlane(cr, 0, hexX, hexY, 0xff, run, 0);
    }
}

//
// Gets distance after which critter becomes agressive
//
uint GetDistance(Critter& cr)
{
    // TODO: damaged eye??
    uint base = __LookNormal + 3 * cr.Stat[ST_PERCEPTION];

    // switch works only for ints??
    int role = int(cr.Stat[ST_NPC_ROLE]);
    switch(role)
    {
    case ROLE_DEFAULT:
        // mob.Say(SAY_NORM, "" + base + "/" + 3 + "=" + base/3);
        return base / 3;
    case ROLE_AGRESSIVE:
        return base / 2;
    case ROLE_PASSIVE:
        return base / 4;
    }
    return base / 3;
}
//
// Alerts that oponent is near
//
void _MobShowCritter(Critter& cr, Critter& showCrit)
{
    if(showCrit.IsPlayer())
        ALERTED(cr) += 1;
}

void _MobHideCritter(Critter& cr, Critter& hideCrit)
{
    if(hideCrit.IsPlayer())
        ALERTED(cr) -= 1;
}




//
// 30-08-2013 Cubik: dodany CD dla gracza na ponowne wybranie questu : 6-9 real-time godzin
//
void r_QuestCD(Critter& player, Critter@ npc)
{
    GameVar@ var = GetLocalVar(LVAR_q_la_gunrunners_caravan, player.Id);
    var = 8; // zakonczenie questu
    uint[] values = { player.Id, npc.Id };
    
    #ifndef __DEBUG__
    CreateTimeEvent(AFTER(REAL_HOUR(Random(6,9))), "e_reset_quest_var", values, true);
    #endif
    
    #ifdef __DEBUG__
    CreateTimeEvent(AFTER(REAL_MINUTE(Random(1,1))), "e_reset_quest_var", values, true); // dla testow 1 minute czekania na reset questu
    #endif
}

uint e_reset_quest_var(array<uint>@ values)
{    	
	GameVar@ var = GetLocalVar(LVAR_q_la_gunrunners_caravan, values[0]);
	var = 0;

	GameVar@ var0 = GetLocalVar(LVAR_q_la_gunrunners_caravan_locid, values[0]);
	var0 = 0;
	
	GameVar@ var1 = GetLocalVar(LVAR_q_la_gunrunners_team, values[0]);
	var1 = 0;
		
	GameVar@ var2 = GetLocalVar(LVAR_q_la_gunrunners_box, values[0]);
	var2 = 0;		

    return 0;
}
