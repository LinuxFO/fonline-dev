//
// FOnline: 2238
// Rotators
//
// prod_barrel_junk.fos
//

#include "_macros.fos"
#include "production_h.fos"

#define TEXT_JUNK    (3014)

#define OBJECT_USE_TIMES          (Random(1, 3)) 
#define PROD_REGEN_TIME           (REAL_SECOND(Random(60, 120)))
#define PROD_MAX_JUNK             (30)

void item_init(Item& item, bool firstTime)
{
    item.Val0 = OBJECT_USE_TIMES;
    item.SetEvent(ITEM_EVENT_SKILL, "_Skill");
    item.SetEvent(ITEM_EVENT_DROP, "_Drop");

    CreateTimeEvent(__FullSecond + PROD_REGEN_TIME, "e_Regen", item.Id, false);
}

void _Drop(Item& item, Critter& cr)
{
    if(cr.GetAccess() != ACCESS_ADMIN)
        DeleteItem(item);
}

bool _Skill(Item& item, Critter& cr, int skill)
{
    Map@ map = cr.GetMap();
    if(!valid(map))
        return false;

    _Desneak(cr);

    if(item.Val0 == 0)
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 3202);
        return true;
    }    

    cr.AddItem(PID_JUNK, 1);
    cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 3014);

    --item.Val0;

    return true;
}

uint e_Regen(array<uint>@ values)
{
    Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;

    if (item.Val0 < PROD_MAX_JUNK)
        item.Val0 += OBJECT_USE_TIMES;

    return PROD_REGEN_TIME;
}


// ENCOUNTER JUNK

void _Junk(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_SKILL, "_Gather");
    AMOUNT(item) = __JunkBatch;
}

class GatherCallback : IGatherCallback
{
    void Callback(Item& item, Critter& cr, Item@)
    {
        DeleteItem(item);
    }
};
GatherCallback Callback;

bool _Gather(Item& item, Critter& crit, int skill)
{
    return Gather(item, crit, null, PID_PUMP_PARTS, __JunkBatch, TEXT_JUNK, 0, @Callback);
}
