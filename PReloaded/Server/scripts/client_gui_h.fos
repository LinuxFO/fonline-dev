//
// FOnline: 2238
// Rotators
//
// client_gui_h.fos
//

// Client GUI header

#ifndef __CLIENT_GUI__
#define __CLIENT_GUI__

#include "client_gui_ex.fos"

//
// API
//
#ifndef CLIENT_GUI

import void  GUI_Init() from "client_gui";
import void  GUI_GetActiveScreens(array<int>& result) from "client_gui";
import int   GUI_GetActiveScreen() from "client_gui";
import int   GUI_GetActiveMainScreen() from "client_gui";
import int   GUI_GetMainScreen() from "client_gui";
import void  GUI_ShowScreen(int screenIndex, int p0, int p1, int p2) from "client_gui";
import void  GUI_HideScreen(int screenIndex, int p0, int p1, int p2) from "client_gui";
import void  GUI_Render( bool mainScreen ) from "client_gui";
import void  GUI_Update(uint dt) from "client_gui";
import bool  GUI_MouseDown(int x, int y, int click) from "client_gui";
import bool  GUI_MouseUp(int x, int y, int click) from "client_gui";
import void  GUI_MouseMove(int fromX, int fromY, int toX, int toY) from "client_gui";
import bool  GUI_KeyDown(uint8 key,string& keyText) from "client_gui";
import bool  GUI_KeyUp(uint8 key,string& keyText) from "client_gui";
import void  GUI_InputLost() from "client_gui";
import bool  GUI_IsKeyPressed(uint8 key) from "client_gui";
//import uint8 GUI_GetCharacter(uint8 key) from "client_gui";
//import uint8 GUI_GetCharacterShift(uint8 key, bool shiftDown) from "client_gui";
import void  GUI_GetIniCoords(string& ini, int& left, int& top, int& right, int& bottom) from "client_gui";

// Create new screen
import IGUIScreenOpt@ GUI_CreateScreen(int screenIndex, string@ sprName) from "client_gui";
// Retrieves interface for screen with given index
import IGUIScreenOpt@ GUI_GetScreen(int screenIndex) from "client_gui";

//Funkcje ze starego GUI moda:
import IGUIElementTextOpt@		GUI_AddText(int screenIndex) from "client_gui"; 
import IGUIElementTextOpt@		GUI_AddText(int screenIndex, string@ text, int x, int y) from "client_gui"; 
import IGUIElementImageOpt@		GUI_AddImage(int screenIndex) from "client_gui"; 
import IGUIElementImageOpt@		GUI_AddImage(int screenIndex, string@ sprName, int patch, int x, int y) from "client_gui"; 
import IGUIElementButtonOpt@		GUI_AddButton(int screenIndex) from "client_gui"; 
import IGUIElementButtonOpt@		GUI_AddButton(int screenIndex, int x, int y) from "client_gui"; 
// Delete old screen, hardcoded screens included
import void GUI_DeleteScreen(int screenIndex) from "client_gui";

// Get options for last created screen, valid only on IGUIScreenCallbackShow::OnShow callback
import IGUIScreenOpt@ GUI_GetScreenOptions() from "client_gui";
#endif

//
// Screen
//

shared interface IGUIScreenCallbackShow
{
    void OnShow(int p0, int p1, int p2);
};
shared interface IGUIScreenCallbackHide
{
    void OnHide(int p0, int p1, int p2);
};
shared interface IGUIScreenCallbackMove
{
    void OnMove(int posX, int posY);
};
shared interface IGUIScreenCallbackFocus
{
    void OnLostFocus();
};

shared interface IGUIScreenCallbackKeyPress   
{ 
   bool OnKeyPress(uint8 key,string& keyText); 
}

shared interface IGUIScreenCallbackMouseDown 
{ 
   bool OnMouseDown(int click); 
}


shared interface IGUIScreenOpt
{
    void SetCallbackShow(IGUIScreenCallbackShow@ callback);        // delault null
    void SetCallbackHide(IGUIScreenCallbackHide@ callback);        // delault null
    void SetCallbackMove(IGUIScreenCallbackMove@ callback);        // delault null
    void SetCallbackFocus(IGUIScreenCallbackFocus@ callback);      // default null
    void SetCallbackMouseDown(IGUIScreenCallbackMouseDown@ callback);	// delault null
    void SetCallbackKeyPress(IGUIScreenCallbackKeyPress@ callback);		// delault null

    IControl@      Control();
    void Control(IControl@ control);                               // needs to be attached to handle extended functionality
    void Position(int x, int y);                                   // delault center of screen
    void Size(int w, int h);                                       // default from surface
    void CanMove(bool enabled);                                    // delault true
    void Modal(bool enabled);                                      // delault true
    void Multiinstance(bool enabled);                              // delault false
    void IgnoreBorders(bool enabled);                              // default false
    void CloseOnMiss(bool enabled);                                // default false
    void AutoCursor(bool enabled, int cursorType);                 // default false
    void Hardcoded(bool enabled);                                  // default false

    // Info
    int GetPosX();
    int GetPosY();
    int GetWidth();
    int GetHeight();
    int GetIndex();
};

shared interface IGUIElementCallbackInit       { void OnInit(int id); }
shared interface IGUIElementCallbackDraw       { void OnDraw(int id); }
shared interface IGUIElementCallbackKeyPress   { bool OnKeyPress( uint8 key, string& keyText ); }
shared interface IGUIElementCallbackMouseDown { void OnMouseDown(int click); }  /// mouse down on element
shared interface IGUIElementCallbackMouseClick { void OnMouseClick(int id, int click); } /// mouse down on elemnt, and up
shared interface IGUIElementCallbackMouseMove  { void OnMouseMove(int x, int y); }
shared interface IGUIElementCallbackValueChange  { void OnValueChange(int newValue); }
shared interface IGUIElementCallbackStateChange { void OnStateChange(bool state); }

shared interface IGUIElementOpt
{
	void CallbackInit(IGUIElementCallbackInit@ callback);                         // default null
	void CallbackDraw(IGUIElementCallbackDraw@ callback);                         // default null
	void CallbackKeyPress(IGUIElementCallbackKeyPress@ callback);                 // default null
	void CallbackMouseDown(IGUIElementCallbackMouseDown@ callback);             // default null
	void CallbackMouseClick(IGUIElementCallbackMouseClick@ callback);             // default null
	void CallbackMouseMove(IGUIElementCallbackMouseMove@ callback);
	void Position(int x, int y);                                                  // default zeros                                         // default picture off
	void Position(int x, int y, int w, int h);
	void Position(string& iniKey);      
	void Visible(bool visible);    
	void AbsolutePosition(bool absolutePosition);   
	void AbsolutePosition(int x, int y);  
	void CollisionTransparent(bool collisionTransparent);    
	void AddText(int id, string@ text, int x, int y, int width, int height, int font, uint color, int flags);
	void AddImage(int id, string@ sprName, int x, int y);
	void AddImage(int id, int patch, string@ sprName, int x, int y);
	IGUIElementCallbackInit@ GetCallbackInit();
	
	void MouseDown(int click);
	void MouseUp(int click, bool IsCollision);
	void MouseMove(int x, int y);
	
	
	void Draw(int screenX, int screenY);
	void Update(uint dt);
	void SetFocused(bool state);
	void SetVisible(bool visible);
	void SetAbsolutePosition(bool absolutePosition);
	void SetCollisionTransparent(bool collisionTransparent);
	void InputLost();

	IGUIElementOpt@ GetNewInstance();

	// Info
	bool IsVisible();
	bool IsFocused();
	bool IsAbsolutePosition();
	bool IsCollisionTransparent();
	bool IsCollision(int screenX, int screenY, int mouseX, int mouseY);
	int GetId();
	int GetPosX();
	int GetPosY();
	int GetHeight();
	int GetWidth();
	//bool KeyPress(uint8 key);
	bool KeyPress( uint8 key, string& keyText );
	void KeyUp(uint8 key);
}

shared interface IGUIElementTextOpt 
{
	void CallbackInit(IGUIElementCallbackInit@ callback);                         // default null
	void CallbackDraw(IGUIElementCallbackDraw@ callback);                         // default null
	void CallbackMouseDown(IGUIElementCallbackMouseDown@ callback);		     // default null
	void CallbackMouseClick(IGUIElementCallbackMouseClick@ callback);             // default null
	void CallbackMouseMove(IGUIElementCallbackMouseMove@ callback);

	void Position(int x, int y);
	void Position(int x, int y, int w, int h);
	void Position(string& iniKey);
	void AbsolutePosition(int x, int y);
	void AbsolutePosition(bool absolutePosition); 
	void Text(string@ text);
	void Text(string@ text, int font, uint color);
	void Text(string@ text, int font, uint color, int flags);
	void Text(string@ text, int font, uint color, uint downColor, int flags);
	void Visible(bool visible);
	void TextBoxSize(int width, int height);
	void TextOptions(int font, uint color);
	void TextOptions(int font, uint color, int flags);
	void TextOptions(int font, uint color, uint colorDown, int flags);
	void TextColor(uint color); 

	void Draw(int screenX, int screenY);
	void SetText(string& text);
	void SetVisible(bool visible);
	void SetFocused(bool state);

	//Info
	bool IsVisible();
	string@ GetText();
	int GetFont();
	uint GetTextColor();


	int GetId();
}

shared interface IGUIElementImageOpt 
{
	void CallbackInit(IGUIElementCallbackInit@ callback);                         // default null
	void CallbackDraw(IGUIElementCallbackDraw@ callback);                         // default null
	void CallbackMouseDown(IGUIElementCallbackMouseDown@ callback);		      // default null		
	void CallbackMouseClick(IGUIElementCallbackMouseClick@ callback);             // default null
	
	void Position(int x, int y);
	void Position(int x, int y, int w, int h);
	void Position(string& iniKey);
	void AbsolutePosition(bool absolutePosition); 
	void Visible(bool visible);

	
	void SetVisible(bool visible);
	void SetPosX(int x);
	void SetPosY(int y);
	void SetFocused(bool state);
	void Draw(int screenX, int screenY);

	
	//Info
	bool IsVisible();
	int GetPosX();
	int GetPosY();
	int GetImageWidth();
	int GetImageHeight();

	bool IsCollision(int screenX, int screenY, int mouseX, int mouseY);
}

shared interface IGUIElementButtonOpt 
{
	void CallbackInit(IGUIElementCallbackInit@ callback);                         // default null
	void CallbackDraw(IGUIElementCallbackDraw@ callback);                         // default null
	void CallbackMouseDown(IGUIElementCallbackMouseDown@ callback);	       // default null	
	void CallbackMouseClick(IGUIElementCallbackMouseClick@ callback);             // default null

	void Position(int x, int y);
	void Position(int x, int y, int w, int h);
	void Position(string& iniKey);
	void AbsolutePosition(bool absolutePosition); 
	void Text(string@ text);
	void Text(string@ text, int font, uint color);
	void Text(string@ text, int font, uint color, int flags);
	void Text(string@ text, int font, uint color, uint downColor, int flags);
	void Visible(bool visible);
	void TextShift(int deltaX, int deltaY, int deltaDownX, int deltaDownY);
	void TextWidth(int width);
	void UpPic(string@ sprName);
	void DownPic(string@ sprName);
	void ClickableZone(int width, int height); 
	void ClickableZone(int x, int y, int width, int height);

	void SetVisible(bool visible);
	void SetFocused(bool state);

	//info
	bool IsVisible();
}

#endif // __CLIENT_GUI__
